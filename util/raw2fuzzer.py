#!/usr/bin/env python2
import sys
import os

def main():
    if len(sys.argv) < 2:
        usage()
    
    output_dir = dumb_arg_helper("--out","raw2fuzzer_out")
    port = int(dumb_arg_helper("--port",80))

    sys.path.append(os.path.abspath(os.path.join(__file__,"..","..")))
    import backend.fuzzerdata as mutiny

    if not os.path.isdir(sys.argv[1]):
        print "[>_>] Needs a directory to process, not %s" % sys.argv[1]
        usage()    
    
    print "[^_^] Commencing processing of %d raw files"%len(os.listdir(sys.argv[1]))
    try:
        os.mkdir(output_dir)    
    except:
        pass

    for f in os.listdir(sys.argv[1]):
        inpfile = os.path.join(sys.argv[1],f)
        outfile = os.path.join(output_dir,"%s.fuzzer"%f)
        print "[!.!] writing to %s"%outfile

        fuzzer = mutiny.FuzzerData() 
        fuzzer.port = port

        msg_buf = ""
        try:
            with open(inpfile,"rb") as tmp:
                msg_buf = tmp.read()           
        except Exception as e:
            print e
            continue

        if not msg_buf:
            continue
    
        m = mutiny.Message() 
        m.direction = "outbound"
        m.appendMessageFrom(sourceType=2,message=msg_buf,attributes="fuzz")
        fuzzer.messageCollection.addMessage(m)
        
        m2 = mutiny.Message() 
        m2.direction = "inbound"
        m2.appendMessageFrom(sourceType=2,message="placeholder",attributes="")
        fuzzer.messageCollection.addMessage(m2)
    
        fuzzer.setMessagesToFuzzFromString("0")
        with open(outfile,"w") as out:
            fuzzer.writeToFD(out,"#Generated by raw2fuzzer <(^_^)>",-1,"")

def dumb_arg_helper(option,default=None,required=False):
    try:
        optionIndex = sys.argv.index(option)
        # first 4 args should be lhost/lport/rhost/rport
        if optionIndex <= 4:
            output("[>.>] Missing Option: %s" % (option),RED)
            sys.exit()

        if "--" in sys.argv[optionIndex+1] and required:
            output("[>.>] Please provide valid type of %s" % (option),RED)
            sys.exit()

        return sys.argv[optionIndex+1]

    except:
        if default and not required:
            return default
        elif default == 0:
            return default
        elif required and option in sys.argv:
            output("[>.>] Please provide valid type of %s" % (option),RED)
            sys.exit()

def usage():
    print "[?.?] %s <raw_request_dir>" % sys.argv[0]
    sys.exit()
    



if __name__ == "__main__":
    main()
